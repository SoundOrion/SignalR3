@page "/"
@page "/status"
@using ExeMonitoringDashboard.Models
@using Microsoft.AspNetCore.SignalR.Client

<h3>EXE Status Dashboard</h3>
@foreach (var message in messages)
{
    <li>@message</li>
}

<ul>
    @if (_statuses == null || _statuses.Count == 0)
    {
        <p>現在、プロセスのステータス情報がありません。</p>
    }
    else
    {
        <ul>
            @foreach (var status in _statuses)
            {
                <li>@status.ClientId - @(status.IsRunning ? "🟢 Running" : "🔴 Stopped")</li>
            }
        </ul>
    }
</ul>

@code {
    private List<ProcessStatus> _statuses = new();
    private HubConnection? _hubConnection;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // SignalR 接続を確立
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5291/processHub")
            .WithAutomaticReconnect()
            .Build();

        // SignalR でリアルタイム更新を受信
        _hubConnection.On<List<ProcessStatus>>("ReceiveStatusUpdate", (statuses) =>
        {
            messages.Add("aaaaaaaa");

            _statuses = statuses;

            // foreach (var status in _statuses)
            // {
            //     var encodedMsg = $"{status.ClientId} - {status.IsRunning}";
            //     Console.WriteLine(encodedMsg);
            // }

            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
