@page "/"
@page "/status"
@using ExeMonitoringShared
@using Microsoft.AspNetCore.SignalR.Client

<div class="dashboard-container">
    <h1 class="text-3xl font-bold mb-6">EXE Status Dashboard</h1>

    <!-- フィルター選択 -->
    <div class="filter-container">
        <label for="statusFilter">Filter:</label>
        <select id="statusFilter" @bind="selectedFilter" class="filter-dropdown">
            <option value="All">All</option>
            <option value="Running">Running</option>
            <option value="Stopped">Stopped</option>
        </select>
    </div>

    <div class="status-grid">
        @if (_statuses == null || _statuses.Count == 0)
        {
            <p>現在、プロセスのステータス情報がありません。</p>
        }
        else
        {
            @foreach (var status in FilterStatuses())
            {
                <div class="status-card">
                    <h2>@status.ClientId</h2>
                    <p class="@(status.IsRunning ? "status-running" : "status-stopped")">
                        @(status.IsRunning ? "🟢 Running" : "🔴 Stopped")
                    </p>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<ProcessStatus> _statuses = new();
    private HubConnection? _hubConnection;
    private string selectedFilter = "All";

    protected override async Task OnInitializedAsync()
    {
        // SignalR 接続を確立
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5291/processHub")
            .WithAutomaticReconnect()
            .Build();

        // SignalR でリアルタイム更新を受信
        _hubConnection.On<List<ProcessStatus>>("ReceiveStatusUpdate", (statuses) =>
        {
            _statuses = statuses;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private IEnumerable<ProcessStatus> FilterStatuses()
    {
        return selectedFilter switch
        {
            "Running" => _statuses.Where(s => s.IsRunning),
            "Stopped" => _statuses.Where(s => !s.IsRunning),
            _ => _statuses
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
